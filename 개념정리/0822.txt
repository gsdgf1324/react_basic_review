!! React는 라이브러리! !!
=> 리액트는 전적으로 UI를 렌더링하는데 관여하는 라이브러리!

* 프레임워크와 라이브러리의 차이점
[프레임워크] : 앱을 만들기 위해 필요한 대부분의 것(라이브러리 등등...)을 가지고 있는 것
[라이브러리] : 특정 기능을 모듈화 해놓은 것

* 리엑트에서 사용하는 라이브러리들
- 화면을 바꾸는 라우팅 : react-router-dom
- 상태 관리 : redux, mobx, recoil ..
- 빌드 : webpack, npm ..
- 테스트 : Jest, Eslint, Mocha ..

!! React 컴포넌트 !!
=> 컴포넌트는 리액트로 만들어진 앱을 이루는 최소한의 단위
=> 컴포넌트로 나누어져 있기 때문에 하나의 컴포넌트를 여러 곳에서 사용하는 재사용성이 좋음
=> 또한 여러명이 각자 맡은 컴포넌트를 동시에 수정 가능

* 컴포넌트의 종류
[클래스형 컴포넌트]
구식 방식

[함수형 컴포넌트]
리액트에서 Hooks를 발표한 이후 함수형 컴포넌트를 주로 사용

!! 브라우저가 그려지는 원리와 가상돔 !!
=> 리액트의 주요 특징 가상돔을 사용!

* 브라우저 렌더링 과정 (Critical Rendering Path => CRP)
브라우저가 서버에서 페이지에 대한 HTML 응답을 받고 화면에 표시하기 전에 여러 단계가 있음

1) DOM tree 생성 => 렌더 엔진이 HTML 문서를 읽어 파싱하고 어떤 내용을 페이지에 렌더링할지 결정
2) Render tree 생성 => 브라우저가 DOM 과 CSSOM을 결합, 이 과정에서 화면에 보이는 모든 콘텐츠와 스타일 정보를 모두 포함하는 최종 렌더링 트리를 출력
3) Layout(reflow) => 브라우저가 페이지에 표시되는 각 요소의 크기와 위치를 계산
4) Paint => 실제 화면에 그리기

* 어떤 인터렉션에 의해서 DOM에 변화가 발생하면 그 떄마다 Render Tree가 재생성 됨. 즉 모든 요소들의 스타일을 다시 계산 => Layout => Repaint 과정을 거침
=> 너무 많은 인터렉션이 일어나면 DOM을 조작하는 비용이 커져 성능상 문제가 생김

* 위와같은 이러한 문제로 인해서 나온 것인 가상 돔(Virtual Dom)!!
=> 실제 DOM을 메모리에 복사해둔 것
=> 데이터가 바뀌면 가상돔이 렌더링되고 이전에 생긴 가상돔과 비교하여 바뀐 부분만 실제 돔에 적용을 시킴
=> 바뀐 부분을 찾는 과정을 Diffing 이라 하며, 바뀐 부분만 실제 돔에 적용시키는 것을 재조정 reconciliation 이라고 함
=> 만약 요소가 많이 바뀌었다고 하더라도, 한 번에 묶어서 한 번의 실제 돔을 수정하여 처리하기 때문에 돔을 조작하는 비용을 줄임

!! Node.js!!
- 크롬 v8 JS 엔진으로 빌드한 자바스크립트 런타임으로, 웹 브라우저 환경이 아닌 곳에서도 JS를 사용해서 연산을 할 수 있음.
- 리액트 앱은 웹 브라우저에서 실행되는 코드여서 Node.js 와는 직접적은 연관은 없지만 프로젝트를 개발하는데 주요한 도구들이 Node.js를 사용하기 때문에 필요 (바벨, 웹팩 등..)

!! 웹팩과 바벨 !!

!! CRA로 설치된 리액트 기본 구조 !!
- public/index.html, src/index.js 는 폴더명을 바꾸면 안됨.
- webpack 은 src 폴더에 있는 파일들만 봄
- package.json : 프로젝트 이름, 버전, 필요한 라이브러리와 라이브러리 버전들이 명시, 스크립트 명령어 명시

!! SPA 란? !!
- 웹 사이트의 전체 페이지를 하나의 페이지에 담아 동적으로 화면을 바꿔가며 표현하는 것
- SPA에서 페이지 전환(브라우징)은 HTML 5의 History API를 사용해서 가능하게 만듬 (React-Router-Dom을 이용하여 페이지 이동, React-Router-Dom 에서 History API 를 사용함)

!! JSX !!
- JS의 확장 문법, 리액트에서는 JSX를 이용하여 화면에서 UI가 보이는 모습을 나타내줌
- 자바스크립트 로직과 HtML구조를 같이 사용 할 수 있기 때문에 UI에 데이터가 변한는 것들이나 이벤트들이 처리되는 부분을 더욱 쉽게 구현 가능
- 문법 규칙
    1) 컴포넌트에 여러 엘리먼트 요소가 있다면 반드시 부모 요소 하나로 감싸줘야함
    .. 등등 많음
- key 속성
key 속성을 넣지 않는다면 warning 발생
리액트에서 요소의 리스트를 나열할 때 key를 넣어줘야 함. 키는 React가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 됨
요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야함
가상 돔에서 바뀐부분만 찾을 떄 어떻게 찾을까? => key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있음
key 는 유니크한 값 넣어줘야함 (index 는 비추!)
